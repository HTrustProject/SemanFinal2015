<% # http://apidock.com/rails/ActionView/Helpers/FormHelper/form_for 
# http://guides.rubyonrails.org/form_helpers.html
# http://stackoverflow.com/questions/1956191/ruby-on-rails-drop-down-menu
%>

<!-- Save To Workset form -->
<div id="save-workset" class="center">
	<div id="save-workset-form" class="save-workset-form">
		<div class="workset-select" id="workset-details-id">
		  <select id="worksets-dropbox-id" name="worksets-dropbox">
		    <option name="no-selection" id="0">- select workset -</option>
		  </select>
		</div>
		<div class="save-workset-input">
			<span class="" id="workset-details-title" name="workset-details">
				<input id="workset-title-id" name="title" type="text" placeholder="Title"/>
			</span>
			<span id="save-workset-details-desc" style="display: none">
				<textarea id="workset-descr-id" name="description" type="text" rows="2" cols="30" placeholder="Description"></textarea>
				<a class="hint" href="javascript:void(0)" onclick="$('#save-workset-details-desc').slideUp(); $('#save-workset-show-desc').slideDown();">Hide description field</a>
			</span>
			<% # needed to have the link on a new line %>
			<span class="block"></span>
			<span id="save-workset-show-desc">
				<a class="hint" href="javascript:void(0)" onclick="$('#save-workset-details-desc').slideDown(); $('#save-workset-show-desc').slideUp();">Add description</a>
			</span>
		</div>
		<div class="save-workset-action" id="workset-details-action">
		  <button id="submit-workset-id" class="tag btn btn-warning" disabled="true"
		   onclick="saveWorkset();">Save to Workset</button>
		   <!--onclick="worksetID=saveWorkset(); alert('Going to call save with wid ' + worksetID); saveSearchResultsToWorkset(worksetID);">-->
		</div>	
	</div>


	<% # needed to have the message on a new line %>
	<span class="block"></span>
	<span id="wait-load-id" class="text-center" style="display: none;"></span>
	<div id="savingworkset-status" class="save-workset-status grey" style="display: none;">
		<span id="savingworkset-status-text"></span>
		<div class="close-msg" onclick="$('#savingworkset-status').hide();" title="Hide message"></div>
	</div>
</div>

<script>	
// Error putting the following javascript in assets/javascripts/worksets.js.coffee
	var ajax_load_html = $.parseHTML("<img id='loadingGif' class='loading' src='/assets/load.gif' alt='loading...' />");	
		
	function saveSearchResultsToWorkset(worksetID) {
		console.log("Saving to Workset ID " + worksetID);		


		// get all the document ids, and the selected/not selected state for each
		
		// http://stackoverflow.com/questions/4735342/jquery-to-loop-through-elements-with-the-same-class
		// http://stackoverflow.com/questions/16630211/jquery-get-all-elements-by-class-name	
		
		var searchresults = []; // array of records: [{ internalid:, sourceid:, title:, selected:, queryterms: [] }]
		
		var senseIdToQueryTermsMap = {}; // all unique senses/senseids in this search result page, mapped to their term info: <senseid>: {sense, senseid, term termnum}  
		var listOfSenseIds = []; // 1 dimensional array, just all the senseids for all the senses that produced this search result page [senseid1, senseid2,...n]
		var combinationheadingToSenseIds = []; // 2 dimensional array (array of arrays), where each element is the list of senses for a combination heading
				// [[s1, s2], [s1], [s2]], where the array index = combination-heading count-1
		
		for (var counter = 1; ; counter++) {

			var scope = this;

			// get all the sub-checkboxes belonging to this combination heading
			var checkboxClassname = '.checkboxClass'+counter;
			if($(checkboxClassname).length == 0) {
			//				console.log("checkboxClassname " + checkboxClassname + " does not exist");
			
				break;
			}
			
			// get the data div associated with the current term combination and extract the sense and term info from there
			var datadiv = document.getElementById("combination-heading"+counter); //$("#combination-heading"+counter);


			var senseids = datadiv.getAttribute("data-senseids").split(",");
			var senses = datadiv.getAttribute("data-senses").split(",");
			var terms = datadiv.getAttribute("data-terms").split(",");
			var termnums = datadiv.getAttribute("data-termnums").split(",");
			

			// the senseids, senses, terms and termnums arrays should all be of equal length
			if(senseids.length != terms.length || senseids.length != termnums.length || senses.length != termnums.length) {
				alert("Should not happen: senseids, terms, termnums and senses arrays are of different length");
			}
						
			var senseIdsForTHISCombinationHeading = [];

			for (var i = 0; i < senseids.length; i++) {
				var currsenseid = senseids[i]; // parseInt(senseids[i])
				var currsense = senses[i];
				var currterm = terms[i];
				var currtermnum = termnums[i]; // parseInt(termnums[i])
				
				senseIdToQueryTermsMap[currsenseid] = { // ensures unique senses				    
				    senseid: currsenseid,
				    sense: currsense,
				    term: currterm,
				    termnum: currtermnum					    
			   };
			   
			   senseIdsForTHISCombinationHeading.push(currsenseid); // e.g. [s1, s2]
			   
			    
			} // end for loop on senseids for this combination heading
			
			// add the array of senseids that belong to this current combination heading 
			// into the array keeping track of senses ids per combination heading
			combinationheadingToSenseIds.push(senseIdsForTHISCombinationHeading); //e.g. [[s1, s2], [s1], [s2]]	
			

		    //console.log("queryterms: " + JSON.stringify(senseIdToQueryTermsMap));
	
	
		    // have finished preparing the queryterms for this combination-heading
		    // now prepare the documents/search results of this combination-heading
		    
		    // Next, we process each subsection-checkbox, saving each searchresult associated with that subsection-checkbox:				
		    $(checkboxClassname).each(function(i, obj) {
		    	 				    		
		    	 // http://stackoverflow.com/questions/901712/check-checkbox-checked-property
	    	    if(!$(this).is(":checked")) { // or .prop('checked'); from jQuery 1.6 on
	    	    		// DON'T DO $(checkboxClassname).is(":checked") since that doesn't refer to *this* checkbox, but to all the checkboxes of this css class
	    	    			
	    	    	// For the upcoming conference, we're saving only the selected items
	    	    	return;
	    	    }
		 	    var internalID = $(this).attr("data-internalID"); // $(this).val() 
		 	    var sourceID = $(this).attr("data-sourceID");
			    var doctitle = $("#Title-id-"+internalID).attr("data-doctitle"); //html();
			    // http://stackoverflow.com/questions/901712/check-checkbox-checked-property
			    var selected = $(this).is(':checked'); // $('#myCheckBox').prop('checked'); is not available in earlier versions of Javascript	    		
		//							console.log("Found: " + selected + " " + internalID + " " + sourceID + " title: " + doctitle);
	
			    searchresults.push({
				    internalid: internalID, // parseInt(internalID)
				    sourceid: sourceID,
				    title: doctitle,
				    selected: selected,
				    combinationheading: counter
				    //queryterms: queryterms // the array of sense/term information records at this combination heading
			    });
	
		    }); // finished processing each subsection checkbox (each searchresult)
		    
		} // finished processing combination-heading
	
	
		// first store all the unique sense/term information records
		var uniqueSenseRecords = [];		
		
		
		for(var key in senseIdToQueryTermsMap) { // http://stackoverflow.com/questions/3068534/getting-javascript-object-key-list
			listOfSenseIds.push(key);
			uniqueSenseRecords.push(senseIdToQueryTermsMap[key]); // added a terminfo record, without key
		}
	
	    // time to make a single ajax call and pass a single large JSON array to the current workset
	    
	    // store the query term and sense information
		 // asynchronous, so that we wait for all the queryterm to be returned				
		 $.ajax({				
				method: "POST",
				url: "/queryterms/saveQueryterms" + ".json",
				data: { 
					queryterms: uniqueSenseRecords
				}
		 }).done(function( queryterm_ids, scope ) {
		 
		 		if(searchresults.length==0) {
					console.log("No search results to save: " + JSON.stringify(searchresults));							
								
				} else {		
		 
					//console.log("QUERYTERM_IDS " + queryterm_ids);
			 
			 		// listOfSenseIds <=> queryterm_ids arrays contain one to one mappings to each other (both arrays are in corresponding order)
			 		
			 		for (var i = 0; i < listOfSenseIds.length; i++) { // uniquesenseids
			 		
			 			var senseId = listOfSenseIds[i];
			 			var queryId = queryterm_ids[i]; // both arrays have 1-1 correspondence		 			
			 			
			 			// each sense-term info record has been stored into the Queryterms db and has a unique querytermid
						senseIdToQueryTermsMap[senseId]["querytermid"] = queryId;
//						console.log("senseid " + JSON.stringify(senseIdToQueryTermsMap[senseId]));
			 		}
			 		
			 
			 		var combinationheadingToQuerytermIds = []; // array of arrays: array of queryterm ids associated with each combination heading
					for (var i = 0; i < combinationheadingToSenseIds.length; i++) {
						senseIds = combinationheadingToSenseIds[i];
						
						var querytermIdsForTHISCombinationheading = [];
						for(var j = 0; j < senseIds.length; j++) {
							var senseId = senseIds[j];
							var queryId = senseIdToQueryTermsMap[senseId].querytermid;
							querytermIdsForTHISCombinationheading.push(queryId);
						}
						combinationheadingToQuerytermIds.push(querytermIdsForTHISCombinationheading);
					}
					
					
					// for each searchresult, add in the queryids associated with its combinationheading
					for (var i = 0; i < searchresults.length; i++) {
					
						var searchresult = searchresults[i];
						var combinationheading_index = searchresult.combinationheading - 1; // subtract 1, so we start at 0, to get it to work as an array index
						
						// add a querytermids record to each searchresult, which is an array of queryterm ids that the doc is to be associated with
						searchresult["querytermids"] = combinationheadingToQuerytermIds[combinationheading_index];
					}
			}
						
				//console.log("searchresults " + JSON.stringify(searchresults));				
				
				// now at last, can store the searchresults to the database
				$.ajax({
				    method: "POST",
				    url: "/worksets/saveSearchResults/" + worksetID + ".json",
				    data: {
				    	queryresults: searchresults
				    }
			    }).done(function( wkset ) {
			    	console.log("Saved search results to workset: " + wkset.title);
			    	
		    			document.getElementById("submit-workset-id").disabled=false;
						var selectedIndex = $("#worksets-dropbox-id")[0].selectedIndex;
						var worksetName = $('#workset-title-id').val(); // "New Workset" is at index 0, so subtract 1
						var linkToWorkset = $.parseHTML("View saved workset: <a target='_blank' href='/worksets/" + worksetID + "'>"+worksetName+"</a>");
						$("#savingworkset-status-text").html(linkToWorkset);
						$("#savingworkset-status").show();
						
						$('#wait-load-id').hide();	
			    });
			   		
	    }); // finished storing searchresults	
		

	} // end saveSearchResultsToWorkset()


	var worksets; // JSON object, needs to be global here to be available
		
	function loadWorksets() {

	    // get the worksets and create the workset controls
	    var worksetsDropbox = document.getElementById("worksets-dropbox-id");	   

	    $.ajax({url: "/worksets.json"}).done(function(data)	{		    

		    worksets = data;

		    for (var i in worksets) {
				//console.log(JSON.stringify(worksets[i]));
	
				var option = document.createElement("option");		
				option.setAttribute("value", worksets[i].id);
				option.innerHTML = worksets[i].title;
				worksetsDropbox.appendChild(option);			
		    }		    
		});

	    // bind handler to dropdown select events
	    // on an item being selected, display its fields (title and description)
	    $( "#worksets-dropbox-id" ).change(function() {
		    // http://stackoverflow.com/questions/13556941/get-index-of-selected-option-with-jquery, and why the [0] indexing is needed
		    var selectedIndex = $("#worksets-dropbox-id")[0].selectedIndex;
		    $("#savingworkset-status").hide(); //$("#savingworkset-status-text").html("");										    
		    
		    if(selectedIndex != 0) { // selected existing workset
					$('#workset-title-id').val(worksets[selectedIndex-1].title);
					$('#workset-descr-id').val(worksets[selectedIndex-1].description);
					//$('#workset-title-id').prop('disabled', true);
					//$('#workset-desc-id').prop('disabled', true);
					//alert( "selIndex: " + selectedIndex + " " + worksets[selectedIndex-1].description);
			      document.getElementById("submit-workset-id").disabled=false;
			   } else {// else new workset, need to save it after user has typed a title and desc
			      $('#workset-title-id').val("");
					$('#workset-descr-id').val("");
		        document.getElementById("submit-workset-id").disabled=true;
		    }
		});

		// handler to check if workset title and description have values, to enable save button

		// toggles save button, depending on if the workset can be saved or not
		//http://stackoverflow.com/questions/17384218/jquery-input-event
		$('#workset-descr-id, #workset-title-id').on('input', function () {
		
		   	//check can save to enable save button
		   	//alert("typed");

				var title = $('#workset-title-id').val();
	         var descr = $('#workset-descr-id').val();
	         var button = document.getElementById("submit-workset-id");
	         if(title) {
	           	button.disabled = false;
	        	} else {
	         	button.disabled = true;
	        	}
		});
		
	}

	// saveWorkset() is for creating and updating new worksets, 
	// the actual saving of search results to a workset will be done in saveSearchResultsToWorkset()		
	// http://stackoverflow.com/questions/1767876/rendering-partials-from-one-controllers-view-to-another-controllers-view-in-rail
	function saveWorkset() {
		document.getElementById("submit-workset-id").disabled=true;
		$('#wait-load-id').html(ajax_load_html);
		$('#wait-load-id').show(); // show the wait spinner
		$("#savingworkset-status").hide(); // hide link to saved workset
		
		var worksetID = -1;

		// if new, then create a new Workset from title and desc
		// if update, then update existing workset id with title and desc
		
		// json format expected is {model: {attr: value, attr: val }}
		// http://stackoverflow.com/questions/24243253/param-is-missing-or-the-value-is-empty-user-rails-4		
		var title = $('#workset-title-id').val();
      var descr = $('#workset-descr-id').val();
		        
		var workset_record = { workset: {
				title: title,
				description: descr			
			}
		};
			
		var selectedIndex = $("#worksets-dropbox-id")[0].selectedIndex;
		if(selectedIndex == 0) { // create new workset
		
			//alert("Sending across: " + JSON.stringify(workset_record));			
			
			// http://api.jquery.com/jquery.post/
			$.post(
			  "/worksets.json", //myForm.attr("action"),
			  workset_record,
			  function(workset) { // workset newly added to database is returned
					// need some error handling, but if fine, 
					// add the new record to the 'worksets' Javascript variable and the dropdown			  		
			  		
			   	//alert("Response: " + JSON.stringify(data));
			   	var index = worksets.push(workset); // add the workset newly added to the db to the JS worksets variable, 
			   		// push returns the new length of the worksets array
			   	
			   	var worksetsDropbox = document.getElementById("worksets-dropbox-id");
			   	var option = document.createElement("option");		
					option.setAttribute("value", workset.id);
					option.innerHTML = workset.title;
					worksetsDropbox.appendChild(option);
					worksetsDropbox.selectedIndex = index; // select the new workset in the dropdown
					
					// set the return value
					//alert("New workset: " + workset.id + " setting to : " + workset.id);
					saveSearchResultsToWorkset(workset.id);
			  }			 
			);
		} else {
			// the selected workset is to be updated			
			var workset = worksets[selectedIndex-1]; // off by one because the first dropdown element is the New Workset option
			var worksetID = workset.id; // get the id of the workset record to be updated (and set the return value)			
			
			// if either the title or description has got a new value, we'll be performing an update 
			var updating = (workset.title != title || workset.description != descr) ? true : false;
			
			if(updating) {
				var workset_record = { // this is the format in which the Rails UPDATE operation expects it: {model: { attr: val, attr: val }}
					workset: { 
						title: title, 
						description: descr 
					}
				};			
			
				//alert("workset to be updated as: " + JSON.stringify(workset_record));
				
				// update the selected existing workset
				$.ajax({
					method: "PUT", // PATCH/PUT for update, see http://guides.rubyonrails.org/routing.html
					url: "/worksets/" + worksetID + ".json",
					data: workset_record
				}).done(function( updated_workset ) {
						// need some error handling, but if fine:
						// update the javascript variable with the new values
						worksets[selectedIndex-1].title = updated_workset.title; 
						worksets[selectedIndex-1].description = updated_workset.description;						
						
						// mustn't forget to set the title in the dropbox
						$('option[value="'+workset.id+'"]').text(updated_workset.title);
						//same as: // document.getElementById("worksets-dropbox-id").options[selectedIndex].text = updated_workset.title;
						
						//saveSearchResultsToWorkset(workset.id);
				});	
			}
			// save the search results to the workset, even if we're not updating the workset (title, descr) itself
			saveSearchResultsToWorkset(worksetID);
		}

		//alert("Workset id : " + worksetID);
		return worksetID;
	}
	
</script>
